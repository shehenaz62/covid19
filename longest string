Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

solution

def longestSubString(s):
    a = ""
    max_len = 0 
    
    if len(s) == 0:
        print(0)
    elif len(s) == 1 :
        print(1)
    else:
        for i in list(s):
            current_word = "".join(i)
            
            if current_word in a :
                a = a[a.index(current_word)+1:]
            else:
                a += current_word 
            max_len = max(len(a),max_len) 
    print(max_len)
s = input()   #longestSubString(s)
longestSubString(s)
